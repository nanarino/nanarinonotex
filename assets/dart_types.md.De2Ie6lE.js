import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.DDVcDOAG.js";const c=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"dart/types.md","filePath":"dart/types.md","lastUpdated":1649301010000}'),n={name:"dart/types.md"};function l(p,s,h,k,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><p>可以使用 <code>obj is type</code> 来判断是否属于这个类型实例（子类实例也支持）</p><p><code>obj is! type</code> 是判断不属于实例</p><p><code>obj as type</code> 可以把对象转换为特定的类型</p><h2 id="内置类型" tabindex="-1">内置类型 <a class="header-anchor" href="#内置类型" aria-label="Permalink to &quot;内置类型&quot;">​</a></h2><ul><li>num(int/double)</li><li>String</li><li>bool(true/false)</li><li>List</li><li>Set(LinkedHashSet)</li><li>Map(LinkedHashMap)</li><li>Runes</li><li>Symbol</li><li>null</li></ul><h2 id="字面量" tabindex="-1">字面量 <a class="header-anchor" href="#字面量" aria-label="Permalink to &quot;字面量&quot;">​</a></h2><ul><li><p>double 字面量可以使用整数</p></li><li><p>String 字面量的引号支持单双三引，且支持和 python 一样的<code>r&#39;字符串&#39;</code></p><p>插值无需<code>f&#39;字符串&#39;</code>，而是直接在字符串中使用类似于 JavaScript 的<code>\${表达式}</code> ，或<code>$变量名</code></p><p>const 定义的字符串字面量中初始化插值时只能插<code>$常量名</code></p></li><li><p>bool 字面量只有<code>true</code>和<code>false</code></p></li><li><p>List 字面量使用中括号，末尾的逗号可有可无</p><p>List 字面量前添加 const 关键字会冻结，变成编译时常量</p><p>List 字面量中使用拓展运算符<code>...</code>和<code>...?</code></p><p>同时支持类似 python 里的列表生成式如<code>[ for(var i in arr) if(i%2==0) i ]</code></p></li><li><p>Set 字面量使用花括号，末尾的逗号可有可无</p><p>字面量前加 const 会冻结，变成编译时常量</p></li><li><p>Map 字面量使用花括号，空花括号指的是 Map 而不是 Set</p><p>获取不存在 key 值时返回<code>null</code></p><p>字面量前加 const 会冻结，变成编译时常量</p></li><li><p>List/Set/Map 的字面量前可以紧贴<code>&lt;T&gt;</code> 和 <code>&lt;T,T&gt;</code>表示成员类型</p><p>你可以<code>Map&lt;String, String&gt; map = {&#39;木曜日&#39;:&#39;星期四&#39;};</code></p><p>也可以<code>var map = &lt;String, String&gt;{&#39;木曜日&#39;:&#39;星期四&#39;};</code></p></li></ul><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><p>调用<code>toString()</code> 可以转为字符串</p><p>调用类型的静态构造方法<code>.parse()</code> 可以转换为该类型</p><h2 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h2><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HTTPMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PUT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DELETE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> methodName;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HTTPMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.methodName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @override</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> methodName;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTTPMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.post);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
